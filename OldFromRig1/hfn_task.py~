import sys, types
from pype import *
from Numeric import *
from random import *
from shapes import *
from colors import *
from xFixationTask import xFixationTask
from b8StimFactory import *
from stimulus import stimulus
from sets import *

def RunSet(app):
    app.taskObject.runSet(app)

def cleanup(app):
    app.taskObject.cleanup(app)


def main(app):
    app.taskObject = HFN(app)
    app.globals = Holder()
    app.idlefb()
    app.startfn = RunSet

# This is also something that all tasks have, and it's a python thing.
# Don't touch it.

if not __name__ == '__main__':
	loadwarn(__name__)
else:
	dump(sys.argv[1])


class HFN(xFixationTask):

    def __init__(self, app):
        self.createParamTable(app)
        self.app = app
        self.myStims = list()
        self.numStim = 0
        self.myStimList = list()

##        self.circleMode = 1
##        self.blankMode = 1
##        self.complexShapeMode = 2
##        self.midgroundOnlyMode = 3
##        self.foregroundOnlyMode = 4
##        self.positionMode = 5
##        self.reverseColorMode = 6
##
##        self.backgroundColorMode = 7
##        self.sameColorMode = 8
##        self.temporalDifferenceMode = 9
##        self.temporalDifferenceModeForegroundAlone = 10
##
##
##        self.positionForegroundMode = 12
##        self.accidentalContourMode = 11
##        self.translationMode = 13
##        self.secondStimlusMode = 14
##        self.secondStimlusForegroundOnlyMode = 15
##        self.secondStimlusMidgroundOnlyMode = 16
##
##
##        self.numB8Shapes = 51
##        self.B8ShapeSet = arange(1,self.numB8Shapes+1)
##        self.B8ScreenSet = [5,6,7,10,11,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]
##        self.AIM1AlternateForeground = [2,10,11,16,17,24,25,28,31,40,43,46,47,50]
##        self.AIM1AlternateMidground = [2,10,11,16,17]
##        b8Screen = Set(self.B8ScreenSet)
##        AIM1AlternateForeground = Set(self.AIM1AlternateForeground)
##        tempSet = b8Screen.union(AIM1AlternateForeground)
##        self.unionedAIM1AlternateForeground = list(tempSet)
##        
##        self.blankID = 1
##        self.circleID= 2
##
##        self.reverseCircleSubmode = 1
##        self.reverseComplexSubmode = 2
##        self.reverseMidgroundSubmode = 3
##        self.reverseForegroundSubmode = 4
##
##        self.foregroundDepth = 2
##        self.midgroundDepth = 3
##        self.circleDepth = 4
##        self.backgroundColorDepth = 5
        
    def createStimuli(self,app):            #Create Stimuli - Create stimuli called at beginning
        self.params = self.myTaskParams.check()
        params = self.params
        P = app.getcommon()
        #P = self.myTaskParams.check(mergewith=app.getcommon())
        self.myStims = list()
        self.numStim = 0
        self.myStimList = list()


        myFB = app.fb

        rectH = params['Rectangle_Height']
        rectW = params['Rectangle_Width']
        HFNSizeX = params['HFNSizeX']
        HFNSizeY = params['HFNSizeY']
        dotChance = params['dotChance']
        dotDistX = params['dotDistX']
        dotDistY = params['dotDistY']
        basisColor = params['basisColor']
        spriteCenterX = params['spriteCenterX']
        spriteCenterY = params['spriteCenterY']
        nstim = params['nstim']
        dotRadius = params['dotRadius']
        dotColor = params['dotColor']

        if(params['UseColors.py'] == 1):
            colorList = list() #list of tuples
##            for dictValue in colorDicts.items():
##                for colorValue in dictValue[1].items():
##                    colorList.append(colorValue[1])
            dictValue = luminance_2.items()
            for colorValue in dictValue:
            	colorList.append(colorValue[1])
        else:           
            colorList = eval(params['ColorsToUse'])
        
        randomize_stims = params['randomize_stimuli']
#        if(randomize_stims):
#            shuffle(colorList)
        colorSquares = list()
        for k in arange(0, HFNSizeX / rectW):
            for m in arange(0, HFNSizeY/ rectH):
                rectangleX = .5 * rectW + k * rectW - HFNSizeX/2
                rectangleY = .5 * rectH + m * rectH - HFNSizeY/2

                if(random.random() < .5):
                    colorSquares.append([rectangleX,rectangleY])
                    print [rectangleX,rectangleY]


        dotLocs = list()
        for k in arange(0, HFNSizeX / dotDistX + nstim):
            for m in arange(0, HFNSizeY/ dotDistY):
                circleX = .5 * dotDistX + k * dotDistX - HFNSizeX/2
                circleY = .5 * dotDistY + m * dotDistY - HFNSizeY/2
                if(random.random() < dotChance):
                    dotLocs.append([circleX, circleY])

        for i in arange(0, len(colorList)):
            for j in arange(0, nstim):
                stim = stimulus(j%2,0, 0)
                sp_color = colorList[i]
                sBG = Sprite(HFNSizeX, HFNSizeY, spriteCenterX, spriteCenterY, fb=myFB, depth=2, on=0, centerorigin=1)
                #fill bg
                if(j%2 == 0):
                    sBG.fill(basisColor)
                else:
                    sBG.fill(sp_color)
                #now fill in squares
                for k in arange(0, len(colorSquares)):
                    rectangleX = colorSquares[k][0]
                    rectangleY = colorSquares[k][1]
                    if(j%2 == 1):
                        thisColor = basisColor
                    else:
                        thisColor = sp_color
                    sBG.rect(rectangleX, rectangleY,rectW, rectH, thisColor)
                stim.addSprite(sBG, sp_color)

                #now add dots
                sDots = Sprite(HFNSizeX, HFNSizeY, spriteCenterX, spriteCenterY, fb=myFB, depth=1, on=0, centerorigin=1)
                sDots.fill((0,0,0,0))
                for k in arange(0, len(dotLocs)):
                    circleX = dotLocs[k][0] - j * dotDistX
                    circleY = dotLocs[k][1]                
                    sDots.circlefill(dotColor, dotRadius, circleX, circleY, width=0)
                stim.addSprite(sDots, sp_color)

                self.myStims.append(stim)
                self.myStimList.append(self.numStim)
                self.numStim = self.numStim + 1
    def createParamTable(self,app):         #The parameters for this class

        #create parameter table and window to go along with it

	self.myTaskButton = app.taskbutton(text=__name__, check=1)
	self.myTaskNotebook = DockWindow(title=__name__, checkbutton=self.myTaskButton)
        P = app.getcommon()
	parfile = "%s.%s" % (app.taskname(), P['subject'])
	# Look for an existing saved parameter file for this task
	if parfile:
		parfile = parfile + '.par'

	# Initialization and default values for the parameters.  Each row is
	# one parameter.  The first value is the name of the parameter, the
	# second is its default value, the third defines the type of
	# the value (more on that later) and the fourth is optional and
	# is a descriptive label that pops up when you hold the mouse over
	# that entry in the table.  There are numerous standard parameter
	# types, the most common are self-explanatory.  is_color needs to be
	# 3 or 4 numbers in tuple format, e.g. (255,1,1) for red; the 4th
	# number is optional and is an alpha value (if left off, assumed
	# to be 255).  (0,0,0) is a special code for transparent or for
	# white noise fill pattern, depending on the task, so use (1,1,1)
	# for black.  is_any just gets passed as a string, this is what
	# to use if you need a list of numbers.  is_iparam can take a
	# variance value as either a percentage or an actual number of
	# units, so you'd have "1000+-10%" or "150+-50".  There are a ton of
	# others defined in ptable.py.  Values of None for default value and
	# type make that row into a heading of sorts that can be helpful for
	# organizing a large number of parameters.
	
	self.myTaskParams = ParamTable(self.myTaskNotebook, (
##                ("RF_Params",None,None),
##      		("RF_Center_X", "0",is_int,"X coordinate of the receptive field center in pixels"),
##      		("RF_Center_Y", "0",is_int,"Y coordinate of the receptive field center in pixels"),
##		("RF Scale On Ecc", "1", is_boolean, "Whether or not to scale based on eccentricity"),
##		("RF Scaling", ".625",        is_float, "If RF_Scale_On_Ecc is 1, Size of RF in degrees equals eccentricity * RF Scaling + RF Offset"),
##		("RF Offset", ".5", is_float, "If RF_Scale_On_Ecc is 1,Size of RF in degrees equals eccentricity * RF Scaling + RF Offset"),
##		("RF Radius", "100", is_int, "IF RF_Scale_On_Ecc is 0, this is the radius of the RF in pixels"),
##		("ShowRFSprite", "1", is_boolean, "If 1 display white circle around RF perimeter (use only during testing)"),



                ("Task Params", None, None),
                ("iti",	"1500",		   	is_int, "Inter-trial interval"),
		("IStime",	"0",		   	is_int, "Inter-stimulus interval"),
		("AddExtraISI",	"0",		   	is_int, "Set to 1 to add another ISI after the last stimulus in a trial, 0 otherwise"),
                ("stimon",	"33",			is_int, "Stimulus presentation"),
		("nstim",	"30",			is_int, "Number of stimuli"),
		("randomize_stimuli", 0, is_boolean, "Whether or not to randomize stimuli within repetitions."),
                ("HFNSizeX",	"1024", 	is_int, "Height of HFN Stimulus"),
                ("HFNSizeY",	"768", 	is_int, "Width of HFN Stimulus"),
                ("spriteCenterX",	"50", 	is_int, "X Location of center of HFN Stimulus"),
                ("spriteCenterY",	"50", 	is_int, "X Location of center of HFN Stimulus"),
                ("bg_during", "(10, 10, 10)", is_color, "The background color during stimulus presentation"),
                ("bg_before", "(10, 10, 10)", is_color, "The background color before stimulus presentation"),

                ("Rectangle_Params",None,None),
                ("Rectangle_Height",	"50", 	is_int, "Height of each background rectangle"),
                ("Rectangle_Width",	"50", 	is_int, "Width of each background rectangle"),
       		("basisColor",	"(59,37,31)",is_color, 'Color to base isoluminance on'),
                ("UseColors.py",	"1", 	is_boolean, "Whether or not to test colors in colors.py"),
                ("ColorsToUse",	"", 	is_any, "If UseColors.py is 0 then use the colors listed here (this must be a list of 3-tuples)"),

                ("Dot_Params",None,None),
                ("dotDistX",	"50", 	is_int, "Lateral distance between each column of dots"),
                ("dotDistY",	"50", 	is_int, "Vertical distance between each row of dots"),
       		("dotColor",	"(1,1,1)",is_color, 'Color of dots'),
                ("dotChance",	"50", 	is_float, "Chance that a dot appears at any given location"),
                ("dotRadius",	"50", 	is_int, "Radius of dot in pixels"),

      		("Fixation Params", None, None, "Fixation Parameters"),
       		("fixcolor1",	"(255,255,255)",is_color, 'Color of the fixation dot'),
		("fixcolor2",	"(128,128,128)",is_color),
		("min_err",		"0",		   	is_int),
		("max_err",		"100",		   	is_int),
		("fixwait",		"100",		   	is_int),

                ("Record File Params", None, None, "Params for setting name of record file"),
                ("Use Special Name", "0", is_boolean, "If 1 then the record file name will be AnimalPrefixDate_TaskName_CellGroup_Iteration.rec"),
                ("RFDirectory", "\\home\\shapelab\\recordFiles\\", is_any, "Directory to use for Record Files"),               
                ("AnimalPrefix", "m", is_any, "Animal Prefix to use"),
		("Date","080325",    is_any, "Date to use "),
		("TaskName","HFN",    is_any, "TaskName"),
		("CellGroup","01",    is_int, "# of cell group encountered today"),
		("Iteration","01",    is_int, "# of times this task has been run on this cell group"),

##		("Stimulus Params", None, None),
##		("MidgroundColor",  "(161, 34, 35)",      is_color, "Color of the midground shape in rgb"),
##		("ForegroundColor",  "(29, 34, 225)",   is_color, "Color of the foreground shape in rgb"),
##                ("NumRotations", "8", is_int, "Number of rotations to use"),
##                ("B8_Sampling", "100",is_int,"Number of points in each b-spline"),
##
##		("Stimulus Pres Params", None, None),
##                ("nRepsPerStim",    "3", is_int, "Number of repetitions of each stimulus to present"),
##                ("nBlanks",    "3", is_int, "The number of blank stimuli to present per block"),
##                ("CirclePerceptsPerBlock",    "1", is_int, "The number of circle percepts to present per block"),
##                ("bg_during", "(35, 19, 14)", is_color, "The background color during stimulus presentation"),
##                ("bg_before", "(35, 19, 14)", is_color, "The background color before stimulus presentation"),

		("Reward Params", None, None),
		("numdrops",    "6",           is_int, "Number of juice drops"),
		("rmult",		"1.0",		   	is_float),


                ("Misc Params", None, None, "Miscelaneous Parameters"),
		("Recent Buffer Size", "50", is_int, "The number of trials to use to calculate recent performance"),
		("pause_color", "(150,0,0)", is_color, "The screen will turn this color when the task is paused")
 		), file=parfile)

##    def getRFSprite(self):
##        if(self.params['ShowRFSprite']):
##            circleSprite = Sprite(self.size, self.size, self.myX,self.myY,fb=self.myFB, depth=self.midgroundDepth+1, on=0,centerorigin=1)
##            circleSprite.fill(self.myBG+(0,))
##            circleSprite.circlefill((255,255,255),r=self.radius,x=0,y=0,width=1)
##            return circleSprite
##        else:
##            return None


    def encodeTaskParameters(self,app):     #Encode task Params - Called at the beginning of the task
        #encode task parameters
        params = self.myTaskParams.check()
##	app.encode_plex('rfx')
##	app.encode('rfx')
##	app.encode_plex(params['RF_Center_X']+ app.globals.yOffset)
##	app.encode(params['RF_Center_X']+ app.globals.yOffset)
##	app.encode_plex('rfy')
##	app.encode('rfy')
##	app.encode_plex(params['RF_Center_Y'] + app.globals.yOffset)
##	app.encode(params['RF_Center_Y'] + app.globals.yOffset)
##	app.encode_plex('iti')
##	app.encode('iti')
##	app.encode_plex(int(params['iti']))
##	app.encode(int(params['iti']))
##	app.encode_plex('stim_time')
##	app.encode('stim_time')
##	app.encode_plex(int(params['stimon']))
##	app.encode(int(params['stimon']))
##	app.encode_plex('isi')
##	app.encode('isi')
##	app.encode_plex(int(params['IStime']))
##	app.encode(int(params['IStime']))
##
##      	app.encode_plex('numstim')
##	app.encode('numstim')
##	app.encode_plex(int(params['nstim']))
##	app.encode(int(params['nstim']))


	
    def encodeISI(self,app,myStim):                #Encode upcoming Stimlus Params - Called every ISI
##        params = self.myTaskParams.check()
##        rotCodeDelTime = params['RotCodeDelayTime']
##        t = Timer()
##        #t.reset()
##        app.encode_plex('stimid')
##        app.encode_plex(int(myStim.getStimulusID()+app.globals.plexStimIDOffset))
##        app.encode_plex('rotid')
##        app.encode_plex(int(myStim.getStimulusRotation()+app.globals.plexRotOffset))
##        app.encode_plex('gen_mode')
##        app.encode_plex(int(myStim.getStimulusMode()+app.globals.plexStimIDOffset))
##        app.encode_plex('gen_submode')
##        app.encode_plex(int(myStim.getStimulusSubmode()+app.globals.plexStimIDOffset))
##        app.encode('stimid')
##        app.encode(int(myStim.getStimulusID()+app.globals.plexStimIDOffset))
##        app.encode('rotid')
##        app.encode(int(myStim.getStimulusRotation()+app.globals.plexRotOffset))
##        #print t.ms()
##        t.reset()
##        myTime = t.ms()
##        newTime = myTime
##        #print myTime
##        
##        while(newTime - myTime < rotCodeDelTime):
##            #busy wait
##            newTime= t.ms()
##        #print newTime
##        app.encode('gen_mode')
##        app.encode(int(myStim.getStimulusMode()+app.globals.plexStimIDOffset))
##        app.encode('gen_submode')
##        app.encode(int(myStim.getStimulusSubmode()+app.globals.plexStimIDOffset))
        pass
        
    def encodeITI(self,app):                #Encode upcoming Trial info - Called every ITI
        pass
    
    def cleanup(self,app):                      #Cleanup after Task - Called at end
                #delete parameter table and anything else we created
        self.myTaskParams.save()
        self.myTaskButton.destroy()
        self.myTaskNotebook.destroy()
        #del app.globals
        #self.myTaskParams.destroy()
        #if(len(self.myStims) > 0):
        #   for i in arange(1,len(self.mySprites)):
        #       self.mySprites[i].__del__()
        
    def getRecordFileName(self): #gets the record file for this task 
        params = self.myTaskParams.check()
        if(params['Use Special Name']):
            filename = "%s%s%s_%s_%02d_%02d.rec" % (params['RFDirectory'],params['AnimalPrefix'],params['Date'],params['TaskName'],params['CellGroup'],params['Iteration'])
        else:
            filename = None
        return filename


