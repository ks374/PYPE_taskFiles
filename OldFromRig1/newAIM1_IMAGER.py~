#this python script creates and saves all of the newAIM1
# stims as 100x100 tif images
from pype import *
from Numeric import *
from random import *
from shapes import *
from colors import *
from xFixationTask import xFixationTask
from b8StimFactory import *
from newAIM1 import *
from stimulus import stimulus

def RunSet(app):
    app.taskObject.runSet(app)

def cleanup(app):
    app.taskObject.cleanup(app)


def main(app):
    app.taskObject = newAIM1_IMAGER(app)
    app.globals = Holder()
    app.idlefb()
    app.startfn = RunSet


class newAIM1_IMAGER(newAIM1):
    def __init__(self,app):
        self.createParamTable(app)
        self.app = app
        self.myStims = list()
        self.numStim = 0
        self.myStimList = list()
        self.circleMode = 1
        self.perceptMode = 1
        self.blankMode = 1
        self.complexShapeMode = 2
        self.midgroundOnlyMode = 3
        self.foregroundOnlyMode = 4
        self.positionMode = 5
        self.reverseColorMode = 6

        self.backgroundColorMode = 7
        self.sameColorMode = 8
        self.temporalDifferenceMode = 9
        self.temporalDifferenceModeForegroundAlone = 10


        self.positionForegroundMode = 12
        self.accidentalContourMode = 11
        self.translationMode = 13
        self.secondStimlusMode = 14
        self.secondStimlusForegroundOnlyMode = 15
        self.secondStimlusMidgroundOnlyMode = 16

        self.locationFlipMode = 17

        self.extraComplexMode = 18
        self.extraMidgroundsMode = 19
        self.extraForegroundsMode = 20

        self.perceptModeOffset = list()
        self.perceptModeOffset.append(None)
        self.perceptModeOffset.append(0)
        self.perceptModeOffset.append(30)
        self.perceptModeOffset.append(60)


        self.numB8Shapes = 51
        self.numPerceptObjects = 3
        self.B8ShapeSet = arange(1,self.numB8Shapes+1)
        self.B8ScreenSet = [5,6,7,10,11,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]
        self.AIM1AlternateForeground = [2,10,11,16,17,24,25,28,31,40,43,46,47,50]
        self.AIM1AlternateMidground = [2,10,11,16,17]
        b8Screen = Set(self.B8ScreenSet)
        AIM1AlternateForeground = Set(self.AIM1AlternateForeground)
        tempSet = b8Screen.union(AIM1AlternateForeground)
        self.unionedAIM1AlternateForeground = list(tempSet)
        
        self.blankID = 1
        self.circleID= 2

        self.reverseCircleSubmode = 1
        self.reverseComplexSubmode = 2
        self.reverseMidgroundSubmode = 3
        self.reverseForegroundSubmode = 4

        self.foregroundDepth = 2
        self.betweenForeAndMid = 3
        self.midgroundDepth = 4
        self.perceptDepth = 5
        self.backgroundColorDepth = 6
        
    def runSet(self,app):
        params = self.myTaskParams.check()
        dir_name = "images"
        file_pre = "stim_"
        file_post = ".tif"
        dir_sep = "/"

        self.createStimuli(app)
        fbh = self.diameter+max( eval(params['PositionsToUse']))*self.radius
        fbw = self.diameter+max( eval(params['PositionsToUse']))*self.radius
        sqr_color = (255,255,255)
        sqr = 0
        circ = 0
        fb = quickinit(dpy=":0.0", w=fbw, h=fbh, bpp=32, flags=0)
        fb.clear(self.myBG)


        bg_during = (255,255,255)
        for j in arange(0,len(self.myStims)):
            stim = self.myStims[j]
            mode = stim.getStimulusMode()
            submode = stim.getStimulusSubmode()
            rot = stim.getStimulusRotation()
            stimID = stim.getStimulusID()
            print self.perceptModeOffset
            print mode-1
            modeKeyz = (mode-1) % (self.perceptModeOffset[2]) +1
            if(modeKeyz == 1):
                modeDir = "Percept"
            elif(modeKeyz == 2):
                modeDir = "Complex"
            elif(modeKeyz == 3):
                modeDir = "Midground"
            elif(modeKeyz == 4):
                modeDir = "Foreground"
            elif(modeKeyz == 5):
                modeDir = "Position"
            elif(modeKeyz == 6):
                modeDir = "Reverse"
            elif(modeKeyz == 7):
                modeDir = "Background"
            elif(modeKeyz == 8):
                modeDir = "SameColor"
            elif(modeKeyz == 9):
                continue
            elif(modeKeyz == 10):
                continue
            elif(modeKeyz == 11):
                modeDir = "Accidental"
            elif(modeKeyz == 12):
                modeDir = "Position_Foreground"
            elif(modeKeyz == 13):
                modeDir = "Translation"
            elif(modeKeyz == 14):
                modeDir = "SecondStimulus"
            elif(modeKeyz == 15):
                modeDir = "SecondStimulusForegroundOnly"
            elif(modeKeyz == 16):
                modeDir = "SecondStimulusMidgroundOnly"
            elif(modeKeyz == 17):
                modeDir = "LocationFlip"
            elif(modeKeyz == 18):
                modeDir = "ExtraComplex"
            elif(modeKeyz == 19):
                modeDir = "ExtraMidground"
            elif(modeKeyz == 20):
                modeDir = "ExtraForeground"
            else:
                modeDir = "Unknown"
            imageName = "%s%s%s%s%s%03d_rot_%03d_mode_%02d_submode_%02d%s" % (dir_name,dir_sep,modeDir,dir_sep,file_pre,stimID,rot,mode,submode,file_post)
            print imageName
            sprites = stim.getSprites()
            for k in arange(0,len(sprites) ):
                sprites[len(sprites)-1-k].on()
                sprites[len(sprites)-1-k].blit(fb=fb)
            if(sqr):
                fb.rectangle(0,0,fbh-1,fbw-1, sqr_color,1)
            if(circ):
                fb.circle(0,0,fbh,sqr_color,1)
            fb.flip()
            fb.snapshot(imageName)
            fb.flip()
            for k in arange(0, len(sprites) ):
                sprites[k].off()
            fb.clear(self.myBG)

